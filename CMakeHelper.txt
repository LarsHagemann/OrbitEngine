macro(set_option var default type docstring)
    if(NOT DEFINED ${var})
        set(${var} ${default})
    endif()
    set(${var} ${${var}} CACHE ${type} ${docstring} FORCE)
endmacro()	

macro(physx_dependency dependency)
	target_include_directories(${dependency} 
		PUBLIC
		${PHYSX_ROOT_PATH}/physx/include/
		${PHYSX_ROOT_PATH}/pxshared/include/
	)
	target_link_libraries(${dependency} LINK_PUBLIC 
		debug "${PHYSX_LIBRARY_PATH}/debug/PhysXCommon_static_64.lib"
		debug "${PHYSX_LIBRARY_PATH}/debug/PhysX_static_64.lib"
		debug "${PHYSX_LIBRARY_PATH}/debug/PhysXFoundation_static_64.lib"
		debug "${PHYSX_LIBRARY_PATH}/debug/PhysXCooking_static_64.lib"
		debug "${PHYSX_LIBRARY_PATH}/debug/PhysXCharacterKinematic_static_64.lib"
		debug "${PHYSX_LIBRARY_PATH}/debug/PhysXPvdSDK_static_64.lib"
		debug "${PHYSX_LIBRARY_PATH}/debug/PhysXExtensions_static_64.lib"
		optimized "${PHYSX_LIBRARY_PATH}/release/PhysX_static_64.lib"
		optimized "${PHYSX_LIBRARY_PATH}/release/PhysXFoundation_static_64.lib"
		optimized "${PHYSX_LIBRARY_PATH}/release/PhysXCooking_static_64.lib"
		optimized "${PHYSX_LIBRARY_PATH}/release/PhysXCharacterKinematic_static_64.lib"
		optimized "${PHYSX_LIBRARY_PATH}/release/PhysXPvdSDK_static_64.lib"
		optimized "${PHYSX_LIBRARY_PATH}/release/PhysXExtensions_static_64.lib"
	)
endmacro()

macro(orbit_sample sample_name additional_files)
	add_executable(${sample_name} main.cpp ${additional_files})
	target_link_libraries(${sample_name} LINK_PUBLIC ${PROJECT_NAME})
	target_include_directories(${sample_name} PUBLIC ${CMAKE_SOURCE_DIR}/inc/ ${CMAKE_SOURCE_DIR}/dep/)
	if (NOT "${EIGEN_ROOT_PATH}" STREQUAL "")
		target_include_directories(${sample_name} PUBLIC ${EIGEN_ROOT_PATH})
	endif()
	if (NOT "${IMGUI_ROOT_PATH}" STREQUAL "")
		target_include_directories(${sample_name} PRIVATE ${IMGUI_ROOT_PATH})
	endif()
	add_compile_definitions(DIRECTINPUT_VERSION=0x0800 NOMINMAX ${ORBIT_RENDER_ENGINE})
	file(MAKE_DIRECTORY ${ORBIT_APPDATA}/${sample_name})
	file(COPY ${CMAKE_SOURCE_DIR}/shader DESTINATION ${ORBIT_APPDATA}/${sample_name}/)
	physx_dependency(${sample_name})
endmacro()
